}
# For interval results, calculate cumulative production
if(interval) {
for(i in unique(dat[, id.name])) {
dat[dat[, id.name]==i, 'cvBg'] <- cumsum(dat[dat[, id.name]==i, 'vBg' ])
dat[dat[, id.name]==i, 'cvCH4'] <- cumsum(dat[dat[, id.name]==i, 'vCH4'])
}
}
# For cumulative results, calculate interval production from cvCH4
if(!interval) {
for(i in unique(dat[, id.name])) {
dat[dat[, id.name]==i, 'vBg'] <- diff(c(0, dat[dat[, id.name]==i, 'cvBg' ]))
dat[dat[, id.name]==i, 'vCH4'] <- diff(c(0, dat[dat[, id.name]==i, 'cvCH4']))
}
}
# Calculate production rates
for(i in unique(dat[, id.name])) {
dat[dat[, id.name]==i, 'rvBg'] <- dat[dat[, id.name]==i, 'vBg' ]/dt[dat[, id.name]==i]
dat[dat[, id.name]==i, 'rvCH4']<- dat[dat[, id.name]==i, 'vCH4' ]/dt[dat[, id.name]==i]
}
# Drop t0 if not requested (whether originally present or added)
if(!showt0) {
dat <- dat[dat[, time.name] != 0, ]
}
# Sort and return results
dat <- dat[order(dat[, id.name], dat[, time.name]), ]
if(is.null(comp)) {
warning('Biogas composition date (\'comp\' and \'name.comp\' arguments) not provided so CH4 results will not be returned.')
dat <- dat[, ! names(dat) %in% c(comp.name, 'vCH4', 'cvCH4', 'rvCH4')]
}
if(all(is.na(dt))) {
dat <- dat[, ! names(dat) %in% c('rvBg','rvCH4')]
}
# Drop NAs if they extend to the latest time for a given bottle (based on problem with AMPTSII data, sometimes shorter for some bottles)
if(any(is.na(dat[, dat.name]))) {
dat2 <- data.frame()
for(i in unique(dat[, id.name])) {
dd <- dat[dat[, id.name] == i, ]
if(is.na(dd[nrow(dd), dat.name])) {
# All NAs
i1 <- which(is.na(dd[, dat.name]))
# Look for consecutive NAs
i1d <- diff(i1)
# That are uninterupted by a value
if(any(i1d > 1)) {
i2 <- max(which(i1d > 1)) + 1
} else {
i2 <- 1
}
i3 <- i1[i2]
dat2 <- rbind(dat2, dd[-c(i3:nrow(dd)), ])
} else {
dat2 <- rbind(dat2, dd)
}
}
dat <- dat2
}
rownames(dat) <- 1:nrow(dat)
# Return results
return(dat)
}
# cumBgMan() test 'long' data structure
cum.prodl.man <- cumBgMan(strawPressure, comp = strawComp, temp = 31,
id.name = "bottle", time.name = "time",
dat.name = "pres", comp.name = "xCH4",
temp.init = 21.55, pres.resid = "pres.resid", pres.init = 0.0,
headspace = strawSetup, vol.hs.name = "headspace",
pres.amb = 1.01, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# cumBgMan() test 'long' data structure
cum.prodl.man <- cumBgMan(strawPressure, comp = strawComp, temp = 31,
data.struct = 'long',
id.name = "bottle", time.name = "time",
dat.name = "pres", comp.name = "xCH4",
temp.init = 21.55, pres.resid = "pres.resid", pres.init = 0.0,
headspace = strawSetup, vol.hs.name = "headspace",
pres.amb = 1.01, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
head(cum.prodl.man)
# cumBg() same data
cum.prodl <- cumBg(strawPressure, dat.type = "pres", comp = strawComp, temp = 31,
id.name = "bottle", time.name = "time",
dat.name = "pres", comp.name = "xCH4",
temp.init = 21.55, pres.resid = "pres.resid", pres.init = 0.0,
headspace = strawSetup, vol.hs.name = "headspace",
pres.amb = 1.01, absolute = FALSE,
extrap = TRUE,
addt0 = TRUE)
head(cum.prodl)
# Compare results from cumBgMan() and cumBg()
all_equal(cum.prodl.man, cum.prodl, ignore_col_order = FALSE,
ignore_row_order = FALSE, convert = FALSE)
# Plot results
ggplot.1 <- ggplot(cum.prodl.man, aes(time, cvCH4, colour = bottle)) +
geom_point() +
geom_line(aes(group = bottle)) +
labs(x = "Time [d]", y = "cvCH4  [mL]", colour = "Bottle no.")  +
theme_bw()
ggplot.2 <- ggplot(cum.prodl, aes(time, cvCH4, colour = bottle)) +
geom_point() +
geom_line(aes(group = bottle)) +
labs(x = "Time [d]", y = "cvCH4  [mL]", colour = "Bottle no.")  +
theme_bw()
grid.arrange(ggplot.1, ggplot.2, ncol=1)
# Sludge data. Longcombo data structure.
# cumBgMan()
# NTS: Currently, 'longcombo' data requires comp to be stated as comp = comp. If not stated, this will result in removal of CH4 calculations and message according missing comp and comp.name.
cum.prodc.man <- cumBgMan(UQsludgePres, temp = 30, comp = comp,
id.name = "id", time.name = "time.d",
dat.name = "pres", comp.name = 'xCH4',
temp.init = 30, pres.resid = "pres.resid", pres.init = 0.0,
headspace = UQsludgeSetup, vol.hs.name = "vol.hs",
pres.amb = 101.3, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# Sort data and then creates CSV files
# Nanna Løjborg and Sasha D. Hafner
# 26 August 2019
### Longcombo
library(plyr)
library(readxl)
library(tidyr)
## Setup
setup <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 1)
colnames(setup)
setup <- setNames(setup, tolower(names(setup)))
names(setup)[names(setup) == "inoculum (g)"] <- "m.inoc"
names(setup)[names(setup) == "substrate vs mass (g)"] <- "m.sub.vs"
names(setup)[names(setup) == "total (g)"] <- "m.tot"
names(setup)[names(setup) == "headspace (ml)"] <- "vol.hs"
setup$id <- paste(setup$'bottle id', setup$description)
setup <- setup[ , c('bottle id', 'id', 'm.inoc', 'm.sub.vs', 'vol.hs')]
setup
# Make csv file
write.csv(setup, '../output csv/UQsludgeSetup.csv', row.names = FALSE)
# Make rda file
class(setup)
setup <- as.data.frame(setup)
UQsludgeSetup <- setup
save(UQsludgeSetup, file = '../output rda/UQsludgeSetup.rda')
## Pressure
pressure <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(pressure)
pressure <- setNames(pressure, tolower(names(pressure)))
names(pressure)[names(pressure) == "pressure (mbar)"] <- "pres"
names(pressure)[names(pressure) == "xch4"] <- "xCH4"
names(pressure)[names(pressure) == "time (d)"] <- "time.d"
pressure <- pressure[ , c('bottle id', 'time.d', 'pres', 'xCH4')]
# Merge pressure and setup data frame to introduce 'id' column in pressure
pressure <- merge(pressure, setup, by = "bottle id")
pressure <- pressure[ , c('id', 'time.d', 'pres', 'xCH4')]
head(pressure)
# Convert to pressure from mbar to kPa
pressure$pres <- pressure$pres*0.1
# Add residual pressure (gauge). Assumed to be atmospheric.
pressure$pres.resid <- 0
# Make csv file
write.csv(pressure, '../output csv/UQsludgePres.csv', row.names = FALSE)
# Make rda file
class(pressure)
pressure <- as.data.frame(pressure)
UQsludgePres <- pressure
save(UQsludgePres, file = '../output rda/UQsludgePres.rda')
## Mass
mass <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(mass)
mass <- setNames(mass, tolower(names(mass)))
names(mass)[names(mass) == "initial mass (g)"] <- "mass.init"
names(mass)[names(mass) == "final mass (g)"] <- "mass.final"
names(mass)[names(mass) == "xch4"] <- "xCH4"
names(mass)[names(mass) == "time (d)"] <- "time.d"
# Merge mass and setup data frame to introduce 'id' column in mass
mass <- merge(mass, setup, by = "bottle id")
mass <- mass[ , c('id', 'time.d', 'mass.init', 'mass.final', 'xCH4')]
mass
mass$mass <- mass$mass.init - mass$mass.final
mass <- na.omit(mass)
# Make csv file
write.csv(mass, '../output csv/UQsludgeMass.csv', row.names = FALSE)
# Make rda file
class(mass)
UQsludgeMass <- mass
save(UQsludgeMass, file = '../output rda/UQsludgeMass.rda')
# Sludge data. Longcombo data structure.
# cumBgMan()
# NTS: Currently, 'longcombo' data requires comp to be stated as comp = comp. If not stated, this will result in removal of CH4 calculations and message according missing comp and comp.name.
cum.prodc.man <- cumBgMan(UQsludgePres, temp = 30, comp = comp,
id.name = "id", time.name = "time.d",
dat.name = "pres", comp.name = 'xCH4',
temp.init = 30, pres.resid = "pres.resid", pres.init = 0.0,
headspace = UQsludgeSetup, vol.hs.name = "vol.hs",
pres.amb = 101.3, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# cumBg()
cum.prodc <- cumBg(UQsludgePres, dat.type = 'pres', temp = 30, data.struct = 'longcombo',
id.name = "id", time.name = "time.d",
dat.name = "pres", comp.name = 'xCH4',
temp.init = 30, pres.resid = "pres.resid", pres.init = 0.0,
headspace = UQsludgeSetup, vol.hs.name = "vol.hs",
pres.amb = 101.3, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# Compare results from cumBgMan() and cumBg()
all_equal(cum.prodc.man, cum.prodc, ignore_col_order = FALSE,
ignore_row_order = FALSE, convert = FALSE)
# Plot results
ggplot.1 <- ggplot(cum.prodc.man, aes(time.d, cvCH4, colour = id)) +
geom_point() +
geom_line(aes(group = id)) +
labs(x = "Time [d]", y = "cvCH4  [mL]", colour = "Bottle id")  +
theme_bw()
ggplot.2 <- ggplot(cum.prodc, aes(time.d, cvCH4, colour = id)) +
geom_point() +
geom_line(aes(group = id)) +
labs(x = "Time [d]", y = "cvCH4  [mL]", colour = "Bottle id")  +
theme_bw()
grid.arrange(ggplot.1, ggplot.2, ncol=1)
View(cumBgDataPrep)
# Sort data and then creates CSV files
# Nanna Løjborg and Sasha D. Hafner
# 26 August 2019
### Longcombo
library(plyr)
library(readxl)
library(tidyr)
## Setup
setup <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 1)
colnames(setup)
setup <- setNames(setup, tolower(names(setup)))
names(setup)[names(setup) == "inoculum (g)"] <- "m.inoc"
names(setup)[names(setup) == "substrate vs mass (g)"] <- "m.sub.vs"
names(setup)[names(setup) == "total (g)"] <- "m.tot"
names(setup)[names(setup) == "headspace (ml)"] <- "vol.hs"
setup$id <- paste(setup$'bottle id', setup$description)
setup <- setup[ , c('bottle id', 'id', 'm.inoc', 'm.sub.vs', 'vol.hs')]
setup
# Make csv file
write.csv(setup, '../output csv/sludgeTwoBiogasSetup.csv', row.names = FALSE)
# Make rda file
class(setup)
setup <- as.data.frame(setup)
UQsludgeSetup <- setup
save(UQsludgeSetup, file = '../output rda/sludgeTwoBiogasSetup.rda')
## Pressure
pressure <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(pressure)
pressure <- setNames(pressure, tolower(names(pressure)))
names(pressure)[names(pressure) == "pressure (mbar)"] <- "pres"
names(pressure)[names(pressure) == "xch4"] <- "xCH4"
names(pressure)[names(pressure) == "time (d)"] <- "time.d"
pressure <- pressure[ , c('bottle id', 'time.d', 'pres', 'xCH4')]
# Merge pressure and setup data frame to introduce 'id' column in pressure
pressure <- merge(pressure, setup, by = "bottle id")
pressure <- pressure[ , c('id', 'time.d', 'pres', 'xCH4')]
head(pressure)
# Convert to pressure from mbar to kPa
pressure$pres <- pressure$pres*0.1
# Add residual pressure (gauge). Assumed to be atmospheric.
pressure$pres.resid <- 0
# Make csv file
write.csv(pressure, '../output csv/sludgeTwoBiogasPres.csv', row.names = FALSE)
# Make rda file
class(pressure)
pressure <- as.data.frame(pressure)
UQsludgePres <- pressure
save(UQsludgePres, file = '../output rda/sludgeTwoBiogasPres.rda')
## Mass
mass <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(mass)
mass <- setNames(mass, tolower(names(mass)))
names(mass)[names(mass) == "initial mass (g)"] <- "mass.init"
names(mass)[names(mass) == "final mass (g)"] <- "mass.final"
names(mass)[names(mass) == "xch4"] <- "xCH4"
names(mass)[names(mass) == "time (d)"] <- "time.d"
# Merge mass and setup data frame to introduce 'id' column in mass
mass <- merge(mass, setup, by = "bottle id")
mass <- mass[ , c('id', 'time.d', 'mass.init', 'mass.final', 'xCH4')]
mass
mass$mass <- mass$mass.init - mass$mass.final
mass <- na.omit(mass)
# Make csv file
write.csv(mass, '../output csv/sludgeTwoBiogasMass.csv', row.names = FALSE)
# Make rda file
class(mass)
UQsludgeMass <- mass
save(UQsludgeMass, file = '../output rda/sludgeTwoBiogasMass.rda')
# Sludge data. Longcombo data structure.
# cumBgMan()
# NTS: Currently, 'longcombo' data requires comp to be stated as comp = comp. If not stated, this will result in removal of CH4 calculations and message according missing comp and comp.name.
cum.prodc.man <- cumBgMan(sludgeTwoBiogasPres, temp = 30, comp = comp,
id.name = "id", time.name = "time.d",
dat.name = "pres", comp.name = 'xCH4',
temp.init = 30, pres.resid = "pres.resid", pres.init = 0.0,
headspace = UQsludgeSetup, vol.hs.name = "vol.hs",
pres.amb = 101.3, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# Sort data and then creates CSV files
# Nanna Løjborg and Sasha D. Hafner
# 26 August 2019
### Longcombo
library(plyr)
library(readxl)
library(tidyr)
## Setup
setup <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 1)
colnames(setup)
setup <- setNames(setup, tolower(names(setup)))
names(setup)[names(setup) == "inoculum (g)"] <- "m.inoc"
names(setup)[names(setup) == "substrate vs mass (g)"] <- "m.sub.vs"
names(setup)[names(setup) == "total (g)"] <- "m.tot"
names(setup)[names(setup) == "headspace (ml)"] <- "vol.hs"
setup$id <- paste(setup$'bottle id', setup$description)
setup <- setup[ , c('bottle id', 'id', 'm.inoc', 'm.sub.vs', 'vol.hs')]
setup
# Make csv file
write.csv(setup, '../output csv/sludgeTwoBiogasSetup.csv', row.names = FALSE)
# Make rda file
class(setup)
setup <- as.data.frame(setup)
UQsludgeSetup <- setup
save(UQsludgeSetup, file = '../output rda/sludgeTwoBiogasSetup.rda')
## Pressure
pressure <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(pressure)
pressure <- setNames(pressure, tolower(names(pressure)))
names(pressure)[names(pressure) == "pressure (mbar)"] <- "pres"
names(pressure)[names(pressure) == "xch4"] <- "xCH4"
names(pressure)[names(pressure) == "time (d)"] <- "time.d"
pressure <- pressure[ , c('bottle id', 'time.d', 'pres', 'xCH4')]
# Merge pressure and setup data frame to introduce 'id' column in pressure
pressure <- merge(pressure, setup, by = "bottle id")
pressure <- pressure[ , c('id', 'time.d', 'pres', 'xCH4')]
head(pressure)
# Convert to pressure from mbar to kPa
pressure$pres <- pressure$pres*0.1
# Add residual pressure (gauge). Assumed to be atmospheric.
pressure$pres.resid <- 0
# Make csv file
write.csv(pressure, '../output csv/sludgeTwoBiogasPres.csv', row.names = FALSE)
# Make rda file
class(pressure)
pressure <- as.data.frame(pressure)
UQsludgePres <- pressure
save(UQsludgePres, file = '../output rda/sludgeTwoBiogasPres.rda')
## Mass
mass <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(mass)
mass <- setNames(mass, tolower(names(mass)))
names(mass)[names(mass) == "initial mass (g)"] <- "mass.init"
names(mass)[names(mass) == "final mass (g)"] <- "mass.final"
names(mass)[names(mass) == "xch4"] <- "xCH4"
names(mass)[names(mass) == "time (d)"] <- "time.d"
# Merge mass and setup data frame to introduce 'id' column in mass
mass <- merge(mass, setup, by = "bottle id")
mass <- mass[ , c('id', 'time.d', 'mass.init', 'mass.final', 'xCH4')]
mass
mass$mass <- mass$mass.init - mass$mass.final
mass <- na.omit(mass)
# Make csv file
write.csv(mass, '../output csv/sludgeTwoBiogasMass.csv', row.names = FALSE)
# Make rda file
class(mass)
UQsludgeMass <- mass
save(UQsludgeMass, file = '../output rda/sludgeTwoBiogasMass.rda')
# Sort data and then creates CSV files
# Nanna Løjborg and Sasha D. Hafner
# 26 August 2019
### Longcombo
library(plyr)
library(readxl)
library(tidyr)
## Setup
setup <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 1)
colnames(setup)
setup <- setNames(setup, tolower(names(setup)))
names(setup)[names(setup) == "inoculum (g)"] <- "m.inoc"
names(setup)[names(setup) == "substrate vs mass (g)"] <- "m.sub.vs"
names(setup)[names(setup) == "total (g)"] <- "m.tot"
names(setup)[names(setup) == "headspace (ml)"] <- "vol.hs"
setup$id <- paste(setup$'bottle id', setup$description)
setup <- setup[ , c('bottle id', 'id', 'm.inoc', 'm.sub.vs', 'vol.hs')]
setup
# Make csv file
write.csv(setup, '../output csv/sludgeTwoBiogasSetup.csv', row.names = FALSE)
# Make rda file
class(setup)
setup <- as.data.frame(setup)
sludgeTwoBiogasSetup <- setup
save(sludgeTwoBiogasSetup, file = '../output rda/sludgeTwoBiogasSetup.rda')
## Pressure
pressure <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(pressure)
pressure <- setNames(pressure, tolower(names(pressure)))
names(pressure)[names(pressure) == "pressure (mbar)"] <- "pres"
names(pressure)[names(pressure) == "xch4"] <- "xCH4"
names(pressure)[names(pressure) == "time (d)"] <- "time.d"
pressure <- pressure[ , c('bottle id', 'time.d', 'pres', 'xCH4')]
# Merge pressure and setup data frame to introduce 'id' column in pressure
pressure <- merge(pressure, setup, by = "bottle id")
pressure <- pressure[ , c('id', 'time.d', 'pres', 'xCH4')]
head(pressure)
# Convert to pressure from mbar to kPa
pressure$pres <- pressure$pres*0.1
# Add residual pressure (gauge). Assumed to be atmospheric.
pressure$pres.resid <- 0
# Make csv file
write.csv(pressure, '../output csv/sludgeTwoBiogasPres.csv', row.names = FALSE)
# Make rda file
class(pressure)
pressure <- as.data.frame(pressure)
sludgeTwoBiogasPres <- pressure
save(sludgeTwoBiogasPres, file = '../output rda/sludgeTwoBiogasPres.rda')
## Mass
mass <- read_excel('../data/UQ_WW_sludge.xlsx', sheet = 2)
colnames(mass)
mass <- setNames(mass, tolower(names(mass)))
names(mass)[names(mass) == "initial mass (g)"] <- "mass.init"
names(mass)[names(mass) == "final mass (g)"] <- "mass.final"
names(mass)[names(mass) == "xch4"] <- "xCH4"
names(mass)[names(mass) == "time (d)"] <- "time.d"
# Merge mass and setup data frame to introduce 'id' column in mass
mass <- merge(mass, setup, by = "bottle id")
mass <- mass[ , c('id', 'time.d', 'mass.init', 'mass.final', 'xCH4')]
mass
mass$mass <- mass$mass.init - mass$mass.final
mass <- na.omit(mass)
# Make csv file
write.csv(mass, '../output csv/sludgeTwoBiogasMass.csv', row.names = FALSE)
# Make rda file
class(mass)
sludgeTwoBiogasMass <- mass
save(sludgeTwoBiogasMass, file = '../output rda/sludgeTwoBiogasMass.rda')
# Sludge data. Longcombo data structure.
# cumBgMan()
# NTS: Currently, 'longcombo' data requires comp to be stated as comp = comp. If not stated, this will result in removal of CH4 calculations and message according missing comp and comp.name.
cum.prodc.man <- cumBgMan(sludgeTwoBiogasPres, temp = 30, comp = comp,
id.name = "id", time.name = "time.d",
dat.name = "pres", comp.name = 'xCH4',
temp.init = 30, pres.resid = "pres.resid", pres.init = 0.0,
headspace = UQsludgeSetup, vol.hs.name = "vol.hs",
pres.amb = 101.3, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# cumBg()
cum.prodc <- cumBg(UQsludgePres, dat.type = 'pres', temp = 30, data.struct = 'longcombo',
id.name = "id", time.name = "time.d",
dat.name = "pres", comp.name = 'xCH4',
temp.init = 30, pres.resid = "pres.resid", pres.init = 0.0,
headspace = UQsludgeSetup, vol.hs.name = "vol.hs",
pres.amb = 101.3, absolute = FALSE,
extrap = TRUE, addt0 = TRUE)
# Compare results from cumBgMan() and cumBg()
all_equal(cum.prodc.man, cum.prodc, ignore_col_order = FALSE,
ignore_row_order = FALSE, convert = FALSE)
# Cumulative 'wide' structure data
DBFZcum.w.prod <- cumBgVol(DBFZfeedVolW, comp = 1, temp = 0, pres = 1,
time.name = 'time.d',
data.struct = 'wide',
dat.name = '1',
dry = TRUE,
interval = FALSE)
DBFZcum.w.prodn <- cumBg(DBFZfeedVolW, comp = 1, temp = 0, pres = 1,
time.name = 'time.d',
data.struct = 'wide',
dat.name = '1',
dry = TRUE,
interval = FALSE)
all_equal(DBFZcum.w.prod, DBFZcum.w.prodn, convert = TRUE)
# Sort data and then creates CSV files
# Nanna Løjborg and Sasha D. Hafner
# 30 August 2019
library(plyr)
library(readxl)
library(tidyr)
# Setup
setup <- read_excel('../data/DBFZ_feed.xlsx', sheet = 1)
setup[is.na(setup)] <- 0
colnames(setup)
names(setup)[names(setup) == "Bottle key"] <- "id"
names(setup)[names(setup) == "Inoculum mass (g)"] <- "m.inoc"
names(setup)[names(setup) == "Substrate VS mass (g)"] <- "m.sub.vs"
setup <- setNames(setup, tolower(names(setup)))
setup
# Volume
vol <- read_excel('../data/DBFZ_feed.xlsx', sheet = 2)
class(vol)
vol <- as.data.frame(vol)
vol
# Make csv files
write.csv(setup, '../output csv/feedSetup.csv', row.names = FALSE)
write.csv(vol, '../output csv/feedVol.csv', row.names = FALSE)
# Make rda file
# Setup
setup <- setup[ , c('id', 'm.inoc', 'm.sub.vs')]
class(setup)
setup <- as.data.frame(setup)
feedSetup <- setup
save(feedSetup, file = '../output rda/feedSetup.rda')
# Vol
feedVol <- vol
save(feedVol, file = '../output rda/feedVol.rda')
# Cumulative 'wide' structure data
DBFZcum.w.prod <- cumBgVol(feedVol, comp = 1, temp = 0, pres = 1,
time.name = 'time.d',
data.struct = 'wide',
dat.name = '1',
dry = TRUE,
interval = FALSE)
DBFZcum.w.prodn <- cumBg(feedVol, comp = 1, temp = 0, pres = 1,
time.name = 'time.d',
data.struct = 'wide',
dat.name = '1',
dry = TRUE,
interval = FALSE)
all_equal(DBFZcum.w.prod, DBFZcum.w.prodn, convert = TRUE)
